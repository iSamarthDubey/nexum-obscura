import React, { useState, useEffect, useRef } from 'react';
import { Brain, Zap, Target, Eye, Download, Settings, Play, Pause, RotateCcw, Maximize2, Users, TrendingUp, AlertCircle, Shield } from 'lucide-react';

const NetworkVisualizationAI = () => {
  const canvasRef = useRef(null);
  const animationRef = useRef(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [selectedNode, setSelectedNode] = useState(null);
  const [aiInsights, setAiInsights] = useState([]);
  const [analysisProgress, setAnalysisProgress] = useState(0);
  const [networkData, setNetworkData] = useState({
    nodes: [],
    connections: [],
    suspiciousPatterns: []
  });
  const [viewMode, setViewMode] = useState('3d');
  const [filterMode, setFilterMode] = useState('all');

  // Initialize network data
  useEffect(() => {
    generateNetworkData();
  }, []);

  // Canvas animation
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    canvas.width = canvas.offsetWidth;
    canvas.height = canvas.offsetHeight;

    let particles = [];
    let connections = [];
    let time = 0;

    // Initialize particles (nodes)
    for (let i = 0; i < 30; i++) {
      particles.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        vx: (Math.random() - 0.5) * 2,
        vy: (Math.random() - 0.5) * 2,
        size: Math.random() * 8 + 4,
        color: ['#3B82F6', '#EF4444', '#10B981', '#F59E0B'][Math.floor(Math.random() * 4)],
        pulse: Math.random() * Math.PI * 2,
        type: ['suspect', 'victim', 'associate', 'location'][Math.floor(Math.random() * 4)],
        risk: Math.random()
      });
    }

    // Initialize connections
    for (let i = 0; i < particles.length; i++) {
      for (let j = i + 1; j < particles.length; j++) {
        if (Math.random() < 0.15) {
          connections.push({
            from: i,
            to: j,
            strength: Math.random(),
            suspicious: Math.random() < 0.3
          });
        }
      }
    }

    const animate = () => {
      ctx.fillStyle = 'rgba(15, 23, 42, 0.95)';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      time += 0.02;

      // Draw connections
      connections.forEach(conn => {
        const from = particles[conn.from];
        const to = particles[conn.to];
        
        ctx.beginPath();
        ctx.moveTo(from.x, from.y);
        ctx.lineTo(to.x, to.y);
        
        if (conn.suspicious) {
          ctx.strokeStyle = `rgba(239, 68, 68, ${0.3 + Math.sin(time * 3) * 0.2})`;
          ctx.lineWidth = 2;
        } else {
          ctx.strokeStyle = `rgba(59, 130, 246, ${0.2 + conn.strength * 0.3})`;
          ctx.lineWidth = 1;
        }
        ctx.stroke();

        // Data flow animation
        if (conn.suspicious) {
          const progress = (time % 2) / 2;
          const x = from.x + (to.x - from.x) * progress;
          const y = from.y + (to.y - from.y) * progress;
          
          ctx.beginPath();
          ctx.arc(x, y, 3, 0, Math.PI * 2);
          ctx.fillStyle = '#EF4444';
          ctx.fill();
        }
      });

      // Draw and animate particles
      particles.forEach((particle, i) => {
        // Update position
        particle.x += particle.vx;
        particle.y += particle.vy;

        // Boundary collision
        if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;
        if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;

        // Keep in bounds
        particle.x = Math.max(0, Math.min(canvas.width, particle.x));
        particle.y = Math.max(0, Math.min(canvas.height, particle.y));

        // Draw node
        const pulseSize = particle.size + Math.sin(time + particle.pulse) * 2;
        
        // Outer glow for high-risk nodes
        if (particle.risk > 0.7) {
          ctx.beginPath();
          ctx.arc(particle.x, particle.y, pulseSize + 5, 0, Math.PI * 2);
          ctx.fillStyle = 'rgba(239, 68, 68, 0.3)';
          ctx.fill();
        }

        // Main node
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, pulseSize, 0, Math.PI * 2);
        ctx.fillStyle = particle.color;
        ctx.fill();

        // Node ring
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, pulseSize, 0, Math.PI * 2);
        ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';
        ctx.lineWidth = 2;
        ctx.stroke();

        // Risk indicator
        if (particle.risk > 0.5) {
          ctx.fillStyle = '#FFFFFF';
          ctx.font = '12px monospace';
          ctx.textAlign = 'center';
          ctx.fillText('âš ', particle.x, particle.y + 4);
        }
      });

      // Scanning effect
      if (isAnalyzing) {
        const scanY = (time * 100) % canvas.height;
        ctx.beginPath();
        ctx.rect(0, scanY - 2, canvas.width, 4);
        ctx.fillStyle = 'rgba(16, 185, 129, 0.6)';
        ctx.fill();
        
        // Scan line glow
        const gradient = ctx.createLinearGradient(0, scanY - 20, 0, scanY + 20);
        gradient.addColorStop(0, 'rgba(16, 185, 129, 0)');
        gradient.addColorStop(0.5, 'rgba(16, 185, 129, 0.8)');
        gradient.addColorStop(1, 'rgba(16, 185, 129, 0)');
        ctx.fillStyle = gradient;
        ctx.fillRect(0, scanY - 20, canvas.width, 40);
      }

      animationRef.current = requestAnimationFrame(animate);
    };

    animate();

    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, [isAnalyzing]);

  const generateNetworkData = () => {
    const phoneNumbers = Array.from({length: 15}, () => 
      `+91${Math.floor(Math.random() * 9000000000) + 1000000000}`
    );
    
    const nodes = phoneNumbers.map((phone, i) => ({
      id: i,
      phone,
      type: ['primary_suspect', 'secondary_suspect', 'victim', 'associate', 'unknown'][Math.floor(Math.random() * 5)],
      riskScore: Math.floor(Math.random() * 100),
      location: ['Mumbai', 'Delhi', 'Bangalore', 'Pune', 'Chennai'][Math.floor(Math.random() * 5)],
      lastActive: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000)
    }));

    const connections = [];
    for (let i = 0; i < nodes.length; i++) {
      for (let j = i + 1; j < nodes.length; j++) {
        if (Math.random() < 0.25) {
          connections.push({
            from: i,
            to: j,
            strength: Math.random(),
            callCount: Math.floor(Math.random() * 50) + 1,
            totalDuration: Math.floor(Math.random() * 3600),
            suspicious: Math.random() < 0.3
          });
        }
      }
    }

    setNetworkData({ nodes, connections, suspiciousPatterns: [] });
  };

  const startAIAnalysis = () => {
    setIsAnalyzing(true);
    setAnalysisProgress(0);
    setAiInsights([]);

    // Simulate AI analysis progress
    const interval = setInterval(() => {
      setAnalysisProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsAnalyzing(false);
          generateAIInsights();
          return 100;
        }
        return prev + Math.random() * 15 + 5;
      });
    }, 300);
  };

  const generateAIInsights = () => {
    const insights = [
      {
        type: 'criminal_network',
        title: 'Criminal Network Detected',
        description: 'Hierarchical communication pattern suggests organized criminal structure',
        confidence: 89,
        severity: 'critical',
        affectedNodes: 7
      },
      {
        type: 'temporal_pattern',
        title: 'Coordinated Activity Pattern',
        description: 'Synchronized communication spikes detected across multiple suspects',
        confidence: 76,
        severity: 'high',
        affectedNodes: 5
      },
      {
        type: 'location_clustering',
        title: 'Geographic Clustering',
        description: 'Unusual concentration of activity in specific location clusters',
        confidence: 82,
        severity: 'medium',
        affectedNodes: 4
      },
      {
        type: 'behavioral_anomaly',
        title: 'Behavioral Anomaly',
        description: 'Deviation from normal communication patterns detected',
        confidence: 71,
        severity: 'medium',
        affectedNodes: 3
      }
    ];
    setAiInsights(insights);
  };

  const getNodeTypeColor = (type) => {
    const colors = {
      primary_suspect: '#EF4444',
      secondary_suspect: '#F59E0B',
      victim: '#10B981',
      associate: '#3B82F6',
      unknown: '#6B7280'
    };
    return colors[type] || colors.unknown;
  };

  const getSeverityColor = (severity) => {
    const colors = {
      critical: 'text-red-600 bg-red-50 border-red-200',
      high: 'text-orange-600 bg-orange-50 border-orange-200',
      medium: 'text-yellow-600 bg-yellow-50 border-yellow-200',
      low: 'text-blue-600 bg-blue-50 border-blue-200'
    };
    return colors[severity] || colors.medium;
  };

  return (
    <div className="h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-white overflow-hidden">
      {/* Header */}
      <div className="flex items-center justify-between p-4 bg-black/50 backdrop-blur-sm border-b border-slate-700">
        <div className="flex items-center space-x-3">
          <div className="p-2 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg">
            <Brain className="h-6 w-6 text-white" />
          </div>
          <div>
            <h1 className="text-xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
              AI Network Intelligence
            </h1>
            <p className="text-sm text-slate-400">Advanced Pattern Recognition & Threat Analysis</p>
          </div>
        </div>
        
        <div className="flex items-center space-x-3">
          <select 
            value={viewMode} 
            onChange={(e) => setViewMode(e.target.value)}
            className="bg-slate-800 border border-slate-600 rounded-lg px-3 py-2 text-sm"
          >
            <option value="3d">3D Network View</option>
            <option value="matrix">Matrix Analysis</option>
            <option value="timeline">Timeline View</option>
          </select>
          
          <button
            onClick={startAIAnalysis}
            disabled={isAnalyzing}
            className="px-4 py-2 bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 rounded-lg font-medium flex items-center space-x-2 disabled:opacity-50"
          >
            {isAnalyzing ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />}
            <span>{isAnalyzing ? 'Analyzing...' : 'Start AI Analysis'}</span>
          </button>
        </div>
      </div>

      <div className="flex h-full">
        {/* Main Visualization Area */}
        <div className="flex-1 relative">
          {/* 3D Network Canvas */}
          <canvas
            ref={canvasRef}
            className="w-full h-full bg-slate-900"
            style={{ background: 'radial-gradient(circle at center, #1e293b 0%, #0f172a 100%)' }}
          />
          
          {/* Overlay Controls */}
          <div className="absolute top-4 left-4 space-y-2">
            <div className="bg-black/70 backdrop-blur-sm rounded-lg p-3 border border-slate-600">
              <h3 className="text-sm font-semibold mb-2 text-blue-400">Network Filter</h3>
              <div className="space-y-1">
                {['all', 'suspects', 'high_risk', 'recent_activity'].map(filter => (
                  <button
                    key={filter}
                    onClick={() => setFilterMode(filter)}
                    className={`w-full text-left px-2 py-1 rounded text-xs ${
                      filterMode === filter 
                        ? 'bg-blue-600 text-white' 
                        : 'text-slate-300 hover:bg-slate-700'
                    }`}
                  >
                    {filter.replace('_', ' ').toUpperCase()}
                  </button>
                ))}
              </div>
            </div>

            <div className="bg-black/70 backdrop-blur-sm rounded-lg p-3 border border-slate-600">
              <h3 className="text-sm font-semibold mb-2 text-green-400">Legend</h3>
              <div className="space-y-1 text-xs">
                <div className="flex items-center space-x-2">
                  <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                  <span>Primary Suspect</span>
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-3 h-3 bg-amber-500 rounded-full"></div>
                  <span>Secondary Suspect</span>
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                  <span>Victim/Witness</span>
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
                  <span>Associate</span>
                </div>
              </div>
            </div>
          </div>

          {/* Analysis Progress Overlay */}
          {isAnalyzing && (
            <div className="absolute inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center">
              <div className="bg-slate-800 border border-slate-600 rounded-lg p-6 max-w-md w-full mx-4">
                <div className="text-center mb-4">
                  <div className="inline-flex p-3 bg-gradient-to-r from-green-600 to-blue-600 rounded-full mb-3">
                    <Brain className="h-8 w-8 text-white animate-pulse" />
                  </div>
                  <h3 className="text-lg font-bold text-green-400">AI Analysis in Progress</h3>
                  <p className="text-sm text-slate-400">Scanning network patterns and criminal behaviors</p>
                </div>
                
                <div className="mb-4">
                  <div className="flex justify-between text-sm mb-1">
                    <span>Progress</span>
                    <span>{Math.round(analysisProgress)}%</span>
                  </div>
                  <div className="w-full bg-slate-700 rounded-full h-2">
                    <div 
                      className="bg-gradient-to-r from-green-500 to-blue-500 h-2 rounded-full transition-all duration-300"
                      style={{ width: `${analysisProgress}%` }}
                    ></div>
                  </div>
                </div>

                <div className="text-xs text-slate-400 space-y-1">
                  <div className={analysisProgress > 20 ? 'text-green-400' : ''}>
                    âœ“ Scanning communication patterns
                  </div>
                  <div className={analysisProgress > 40 ? 'text-green-400' : ''}>
                    âœ“ Analyzing temporal relationships
                  </div>
                  <div className={analysisProgress > 60 ? 'text-green-400' : ''}>
                    âœ“ Detecting suspicious clusters
                  </div>
                  <div className={analysisProgress > 80 ? 'text-green-400' : ''}>
                    âœ“ Generating threat intelligence
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Right Sidebar */}
        <div className="w-80 bg-slate-800 border-l border-slate-700 overflow-y-auto">
          {/* AI Insights Panel */}
          <div className="p-4 border-b border-slate-700">
            <div className="flex items-center space-x-2 mb-3">
              <Brain className="h-5 w-5 text-purple-400" />
              <h2 className="font-bold text-purple-400">AI Insights</h2>
            </div>
            
            {aiInsights.length === 0 ? (
              <div className="text-center py-8 text-slate-400">
                <Target className="h-12 w-12 mx-auto mb-2 opacity-50" />
                <p className="text-sm">Run AI analysis to detect patterns</p>
              </div>
            ) : (
              <div className="space-y-3">
                {aiInsights.map((insight, i) => (
                  <div key={i} className={`p-3 rounded-lg border ${getSeverityColor(insight.severity)}`}>
                    <div className="flex items-start justify-between mb-2">
                      <h3 className="font-semibold text-sm">{insight.title}</h3>
                      <span className="text-xs px-2 py-1 bg-white/20 rounded-full">
                        {insight.confidence}%
                      </span>
                    </div>
                    <p className="text-xs mb-2 opacity-90">{insight.description}</p>
                    <div className="flex items-center space-x-3 text-xs">
                      <span className="flex items-center space-x-1">
                        <Users className="h-3 w-3" />
                        <span>{insight.affectedNodes} nodes</span>
                      </span>
                      <span className="flex items-center space-x-1">
                        <AlertCircle className="h-3 w-3" />
                        <span>{insight.severity}</span>
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* Network Statistics */}
          <div className="p-4 border-b border-slate-700">
            <h3 className="font-bold text-blue-400 mb-3 flex items-center space-x-2">
              <TrendingUp className="h-4 w-4" />
              <span>Network Statistics</span>
            </h3>
            <div className="grid grid-cols-2 gap-3">
              <div className="bg-slate-700 p-3 rounded-lg">
                <p className="text-xs text-slate-400">Total Nodes</p>
                <p className="text-lg font-bold text-blue-400">{networkData.nodes.length}</p>
              </div>
              <div className="bg-slate-700 p-3 rounded-lg">
                <p className="text-xs text-slate-400">Connections</p>
                <p className="text-lg font-bold text-green-400">{networkData.connections.length}</p>
              </div>
              <div className="bg-slate-700 p-3 rounded-lg">
                <p className="text-xs text-slate-400">High Risk</p>
                <p className="text-lg font-bold text-red-400">
                  {networkData.nodes.filter(n => n.riskScore > 70).length}
                </p>
              </div>
              <div className="bg-slate-700 p-3 rounded-lg">
                <p className="text-xs text-slate-400">Suspicious</p>
                <p className="text-lg font-bold text-amber-400">
                  {networkData.connections.filter(c => c.suspicious).length}
                </p>
              </div>
            </div>
          </div>

          {/* Node Details */}
          <div className="p-4">
            <h3 className="font-bold text-green-400 mb-3 flex items-center space-x-2">
              <Eye className="h-4 w-4" />
              <span>Node Analysis</span>
            </h3>
            
            {selectedNode ? (
              <div className="bg-slate-700 rounded-lg p-3">
                <div className="flex items-center justify-between mb-2">
                  <span className="font-mono text-sm">{selectedNode.phone}</span>
                  <span className={`px-2 py-1 rounded-full text-xs ${
                    selectedNode.riskScore > 70 ? 'bg-red-600' : 
                    selectedNode.riskScore > 40 ? 'bg-amber-600' : 'bg-green-600'
                  }`}>
                    Risk: {selectedNode.riskScore}
                  </span>
                </div>
                <div className="space-y-2 text-xs">
                  <div className="flex justify-between">
                    <span className="text-slate-400">Type:</span>
                    <span className="capitalize">{selectedNode.type.replace('_', ' ')}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-slate-400">Location:</span>
                    <span>{selectedNode.location}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-slate-400">Last Active:</span>
                    <span>{selectedNode.lastActive.toLocaleDateString()}</span>
                  </div>
                </div>
              </div>
            ) : (
              <div className="bg-slate-700 rounded-lg p-4 text-center">
                <Target className="h-8 w-8 mx-auto mb-2 text-slate-500" />
                <p className="text-sm text-slate-400">Click on a node to view details</p>
              </div>
            )}

            {/* Quick Actions */}
            <div className="mt-4 space-y-2">
              <button className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 py-2 px-3 rounded-lg text-sm font-medium flex items-center justify-center space-x-2">
                <Shield className="h-4 w-4" />
                <span>Deep Scan Selected</span>
              </button>
              <button 
                onClick={() => {
                  setSelectedNode(networkData.nodes[Math.floor(Math.random() * networkData.nodes.length)]);
                }}
                className="w-full bg-slate-700 hover:bg-slate-600 py-2 px-3 rounded-lg text-sm font-medium flex items-center justify-center space-x-2"
              >
                <Eye className="h-4 w-4" />
                <span>Random Node Info</span>
              </button>
              <button className="w-full bg-slate-700 hover:bg-slate-600 py-2 px-3 rounded-lg text-sm font-medium flex items-center justify-center space-x-2">
                <Download className="h-4 w-4" />
                <span>Export Analysis</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Bottom Status Bar */}
      <div className="bg-black/50 backdrop-blur-sm border-t border-slate-700 p-3">
        <div className="flex items-center justify-between text-xs">
          <div className="flex items-center space-x-4">
            <span className="flex items-center space-x-1">
              <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
              <span>System Online</span>
            </span>
            <span>Last Update: {new Date().toLocaleTimeString()}</span>
          </div>
          <div className="flex items-center space-x-4">
            <span>Processing Speed: 2.3k records/sec</span>
            <span>Memory Usage: 67%</span>
            <span>GPU Acceleration: ON</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default NetworkVisualizationAI;
